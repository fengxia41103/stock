# docker-compose version
version: '3.4'

# network
networks:
  data:
  management:


# storage
volumes:
  stock-data:
  redis-data:

x-django-base: &django-base
  build:
    context: ./backend
    dockerfile: ./Dockerfile
  image: backend_stock
  volumes:
    - ./backend:/code
    - type: bind
      source: ./backend/static
      target: /code/static
  environment:
    DJANGO_DEBUG: ${DJANGO_DEBUG}
    MYSQL_DATABASE: ${MYSQL_DATABASE}
    DEPLOY_TYPE: ${DEPLOY_TYPE}
    DJANGO_DB_USER: ${DJANGO_DB_USER}
    DJANGO_DB_PWD: ${DJANGO_DB_PWD}
    DJANGO_DB_HOST: ${DJANGO_DB_HOST}
    DJANGO_DB_PORT: ${DJANGO_DB_PORT}
    DJANGO_REDIS_HOST: ${DJANGO_REDIS_HOST}

# computes
services:
  backend-proxy:
    image: nginx
    ports:
      - "8083:80"
    volumes:
      - ./backend/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - web
    command: [nginx-debug, '-g', 'daemon off;']
    networks:
      - management

  db:
    image: mysql:5.7
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    ports:
      - "3306:3306"
    volumes:
      - stock-data:/var/lib/mysql # persisted volume
      - ./backend/mysql.cnf:/etc/mysql/conf.d/feng.cnf
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_HOST: ${MYSQL_ROOT_HOST}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    networks:
      - data

  web:
    <<: *django-base

    # command: bash -c "python /code/manage.py migrate --noinput && python /code/manage.py createsuperuser --noinput && python /code/manage.py runserver 0.0.0.0:8001"
    # command:
    #   "python /code/manage.py createsuperuser --noinput && gunicorn -w 1 -t 300 -b 0.0.0.0:8001 --log-level=info fin.wsgi"

    networks:
      - data
      - management
    depends_on:
      - db

  celery:
    <<: *django-base
    command: celery -A fin.celery worker -Q summary,stock,statement,price,news -l INFO
    networks:
      - data
    depends_on:
      - db
      - redis
      - web

  redis:
    image: redis
    volumes:
      - redis-data:/data
    networks:
      - data

  frontend:
    image: frontend_stock
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
      args:
        BUILD_FOR: ${BUILD_FOR}
        NPM_TOKEN: ${NPM_TOKEN}
    volumes:
      - ./frontend:/code
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "8084:80"
    command: [nginx-debug, '-g', 'daemon off;']
    networks:
      - management
