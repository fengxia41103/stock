{"pages":[{"title":"Stock Financial Statements","text":"Financial statements are called fundamentals. It is outside the scope of this doc to explain what these statements are and how to read them. As stated in the design , the reported values were often found less useful without computing a ratio, a percentage, or period-to-period comparison. Therefore, this tool takes on the data crunching by providing such computation and comparisons. Four data categories This is applicable to all three statements. On each page one would find data grouped into four categories: reported : These are straight out-of-report numbers. NOTE that units are often omitted and a unit of billion is implied. For example, shared issued of 17.14 would be 17.14 billion shares, whereas working capital of 44.75 would be 44.75 billion dollars. ratio : Ratios are common technique in financial statement analysis. We have covered many of them so far, and the list will continue to grow w/ newer releases. period-to-period growth rate (%) : Using quarterly statement data provided by the Yahoo! API, we picked some data points to compute its growth rate from quarter to quarter. NOTE that all the data points on a statement can be subjected to this calculation. However, we have limited the list on purpose, and will consider to expand this list in the future. A-over-B as % : This is another common technique to establish a relative position between two values. For example, what percentage is the administrative expanse ( A ) over sales ( B ) 1 ? Normalized comparison chart When we analyze financial statement, the number itself isn't interesting. It is their relative position and trend what we are really after. Therefore, we applied normalization — taking the first value as the base , then divide the rest of the data each to the base. Thus, an array [2,3,4,5,6,...] would produce a base of 2 , and the normalized array would be [1,1.5,2,2.5,3,...] . Now w/ normalized data, we could put data points side-by-side to see which is rising and which is falling at the same time, and who is rising/falling faster 2 . Stock statement normalized chart In this example, both the working capital (purple) and quick ratio (black) were deteriorating over time while the working capital fared worse as it had a sharper slope. Balance Sheet Reported Data Calculation Share Issued as is Common Stock as is Retained Earnings as is Cash & Equivalents Per Share (cash & cash equivalent)/(share issued) Working Capital as is Invested Capital as is Tangible Book Value Per Share (tangible book value)/(share issued) Ratios Data Calculation Current Ratio current assets/current liabilities Quick Ratio see below Debt/Equity Ratio total debt/stockholders equity Equity Multiplier total assets/stockholders equity Working Capital/Current Liabilities working capital/current liabilities Price/Cash Premium cash and equivalents per share/latest close price Quick ratio : (cash & equivalents & short-term investments + 50% of account receivable - inventory)/(current liabilities) . NOTE that we take into account for a 50% account receivable loss. We are also assuming a total loss of inventory. Price/Cash Premium : Can the company redeem today's close price w/ nothing but its cash!? This is a what-if analysis if stock investors were to take higher priority than creditors if the company went belly up today ~~ Period-to-Period Growth Rates (%) Data Calculation Shares Issued (this period - last period)/last period Equity same Debt same Account Payable same Account Receivable same Cashes same Working Capital same Invested Capital same Net PP&E same A-over-B as % Data Calculation Capital Structure total debt/total assets Total Liabilities/Total Assets as name Current Assets/Total Assets as name Retained Earnings/Equity retained earning/stockerholders equity Inventory/Current Assets as name Cash Equivalents/Current Assets cash & equivalents & short-term investments/current assets Mathematically it is identical to a ratio, just a different name. ↩ NOTE that this technique has been applied broadly to many charts in the tool. You will see this a lot. ↩","tags":"misc","url":"https://fengxia41103.github.io/stock/stock%20financial%20statements.html"},{"title":"Stock Trend","text":"In the stock price analysis , we have seen the analysis of gain probability by computing its likelihood of making a gain in the selected period. In this trend analysis page, we extend the analysis further by looking at each day's price, especially the down days', to measure its significance — \"if I see a price dip, how big a dip it was?\" Price time span Price time span is a way to analyze one day's close in the context of both in the history and in the future. Last lower First, we search into the history for a price lower than this price, then counting the days between the two dates. This value represents the last time I have seen a price lower than this. We call this the last lower . Now imagine a day when AAPL went down, was $5, or 5% a lot? Should I buy this dip? The last lower value, say, 30, would mean that this dip just put AAPL back to its 30 day's ago. Therefore, if you had bought it 30 days back and held till this moment, you would have gained zero. This value is useful if you are more accustomed to think in term of time than of $5 or 5% return. It is translating that $5 into a time-based measure. Stock last lower In this example, AAPL lost 40 days' worth of ground on 9/20/2021, and clearly you could see the negative trend became larger and larger starting 9/13. Next better Inverse to the last lower , we now turn our lens into the future when standing on a date. The next better is to count days between this date and the next price higher than me . If the stock is on a rising trend, this value would always be 1, meaning you see a higher price on the next day. Similarly, a 0 is the day when the price peaked out because we can't any higher price, and a large value is the time it took while for the stock to recover. Stock next better So to sum it up, these two are measuring a price's significance in term of time, thus highlight a stock's price trend. last lower next better 0 at bottom, or continuously rising at peak, or continously falling 1 or -1 reverse previous trend reverse previous trend large value significant drop slow recovery Gain bought today & hold Gain bought today & hold is an evaluation if you were to buy at the day's close price 1 and hold till the end of the selected period. The gain = (last close today's close)/today's close . Stock gain bought today & hold In this example, AAPL would have rendered most of the days a loss if you had invested because its last close price was low. The larger the negative area, the more significant the difference is between its high price points and low price points. Inversely, one could imagine that area would be in the positives if stock had a rising week. Daily gain probability This is a sibling analysis of the gain probability ranges on the stock price view. Instead of a range, we present a day-by-day view of how a gain probability will change over time, thus highlighting a moving trend of this value. Stock gain probability daily trend In this example, AAPL had good gain probability at the start, indicating the price then was good. However, the probability shrank because price started rising. On 9/8 it reached 0, meaning the close was the peak for its remaining days. Then it started its decline. On 9/16 it had a good open , the only one in the last 4 days. This made the close price on 9/15 having a 25% chance of making a gain. The close price was chosen rather arbitrarily. We have no assumption of someone's trading habit — whether he likes to buy at market opening, or close, or in between. Therefore, the analysis demonstrates the power of the tool and what it can deliver. Choosing a different price point for the calculation will be addressed by future features. ↩","tags":"misc","url":"https://fengxia41103.github.io/stock/stock%20trend.html"},{"title":"Stock Returns","text":"There are three types of return: daily, nightly, and 24-hour. Return values are in percentage (%) , and negative returns are colored in red . Since the analysis done to them are similar, we are to address them together here. daily return : (today's close - today's open)/today's open . This measures the return during normal market hours. nightly return : (today's open - yesterday's close)/yesterday's close . This measures the return during off market hours. 24-hour return : (today's close - yesterday's close)/yesterday's close . This measures the over effect of a 24-hour day, thus including both the market hours and off market hours (for example, many companies choose to make announcement after market close, thus causing price to fluctuate prior to next day's market opening). Stock 24-hour return chart Now with computed returns, we do some basic counting and statistic analysis of the return data. positive vs. negative occurrence This answers that out of the return data, how many were positive and how many were negative. If a stock were on a rise, we would expect it having more positive days than negative ones. However, this takes no account for the scale of each positive/negative return. Stock 24-hour return positive vs. negative occurances In this example, this stock has had 40% positive days vs. 60% negative days. One would thus think it wasn't performing well over this period. return statistics These are some common statistic values computed over the return data, including average, max, min, median, standard deviation, range of, variance, skewness, Kurtosis, average of positive returns, average of negative returns, and compounded return (= product of all returns). Stock 24-hour return statistics","tags":"misc","url":"https://fengxia41103.github.io/stock/stock%20returns.html"},{"title":"Stock Price","text":"Stock's price and return views are part of the stock's detail analysis. In this section we will show in-depth analysis of stock's price trending and returns. Date range User can set a date range by using the date picker: Stock historical price date picker Default end date is TODAY, and the default range is set to be 30 days back from TODAY. Setting an insensible date range, eg. start date is greater than the end date, or some distant dates in the future, will not produce an error. Instead, the backend will return an empty date set, thus rendering this view blank. Historical daily price Price line chart Price line chart is the quickest way to see how a stock is going. The chart includes prices of open , close , high and low . Stock historical price line chart Weekly price chart The weekly price chart breaks down price over the selected date range so to zoom into each week's performance as well as each week's end-2-end return = (week's close - week's open)/week's open . Like all other charts, clicking legends will toggle a data set on/off. Stock historical weekly price chart Gain probability ranges Stock gain probability The gain probability range is to address this common question — if I buy stock at this price, how likely I would make a positive return? To answer this, we create 10 ranges over 0-100%. Then we would use each day's price to estimate which range its probability will fall into. percentage : The percentage measures the total likelyhood you will get a positive return counting day by day. Taking a historical, pretending we can look into the future (thus we have a God's view), counting days when you could make a gain w/ a higher price. The percentage of this count vs. the total days elapse from this date represents a probability. For example, if there are 10 days out of 30 days this one could have made a gain on this current price, the probability will be 10/30=33% . open price : This is the minimal open price you could have purchased to achieve the percentage above. Continuing the example above, if there were 10 days one could have made a positive return, we sort and display the lowest open price, thus assuming you would have paid the least for such a gain probability. A n/a means no price could have achieved such probability 1 . time window gauge : Time window is the days left if you made purchase on a day. For example, buying at $148.56 (the 30-20% probability one) would have less trading days left for you to get out, than buying at $153.87 (the 40-30% probability one). The best pattern would be a high probability and a long trading window to realize such probability. the TODAY-is-cheaper flag : The flag uses the latest known close price (as a proxy to the SPOT price) to compare with the suggested open price above. If the close is less than the open , it puts a flag indicating the current price is more attractive than the open we saw before 2 . It may now seem pointless why one would care such probability at all if it tells no future. However, these probabilities give you a reference point against current price so you get a sense of how it had (or could have) behaved. WARNING : We choose open pretending you are buying it on the beginning of day. Of course, the actual purchase price would be different. So this price value is more of a sense how well it will fare instead of being a precise point to act upon. ↩ WARNING : This is not a guaranteed winner because the stock price may be on a sliding trend, thus a lower price now doesn't warrant you would be able to realize the gain even. For example, if the close price is today's, the probability is only testifying that such price could have made gains in the past, but has no predicting power whatsoever. ↩","tags":"misc","url":"https://fengxia41103.github.io/stock/stock%20price.html"},{"title":"Dev & Deployment","text":"Both the backend and the frontend have been dockerized. Thus, regardless your platform, install Docker & docker-compose first. For user Clone the repo . Go to the project root folder, docker-compose up --build -d . Create a backend admin user: docker-compose run web python manage.py createsuperuser , and follow the instructions. Email is optional. Go to browser http://localhost:8084 , and use the user account to login. Now you should be ready to use the application by adding stocks and sectors. For developers Modify code Using the docker way is preferred. Code will be mounted into the docker as volume (see docker-compose.yaml for details). Thus changes done on your local editor will be reflected in the running docker as live . Debugging It may sound 1980. But the most effective way is to use docker-compose logs -f <service name> to see stack trace and/or error messages. Testing Looking for volunteers !! For network admins networks Network of the setup is fairly simple. We distinguish data vs. management : Stock app networks ports I try to limit exposure of ports on docker host so this application can be easily co-hosted with others without causing port conflicts. In essence, 8084 is the frontend UI port, and 8003 is the backend API port. All others are docker-to-docker only. Component Docker Port Service Host Map Frontend 80 Main frontend app w/ Nginx built-in 8084 Backend 80 Nginx proxy 8003 Backend 3306 MySql DB none Backend 8001 Django app none Backend 6379 Redis none Port mapping can be changed in docker-compose.yml . For example, if to change the frontend proxy from 8084 to 9999 , change the line ports from 8084:80 to 9999:80 . See docker-compose doc for details. frontend : .... ports : - \"8084:80\" # <========= change this line! ....","tags":"misc","url":"https://fengxia41103.github.io/stock/dev%20and%20deployment.html"},{"title":"Stock App Design","text":"Disclaimer, philosophy First of all, this isn't a magic tool to beat the market. We firmly believe the final conclusion should be drawn by the user whose brain power holds the edge over the market, if ever. The purpose of this tool is to assemble information in a fashion to assist the user process these information more efficiently by liberating his/her from tedious, but necessary, steps such as data collection, ratio computation, drawing a line graph, etc., than without such a helper. Thus with this tool, the user could focus onto creating value instead of being bogged down by less value-added works. Audience & goals This application is written for users who have interest in the stock market, in particular, data analysis of the stock data. In my experience, there are five levels of users: Type Tool Audience 1 apps & websites Have basic knowledge, satisfied with reported info 2 Excel Think they have some data/info analysis edge 3 Excel + VBA Automate routine computation and data assembly 4 Script or lib Programmer who gained more computation power over Excel 5 Commercial Professional, sky is the limit, membership A common pattern/workflow these users follow: Obtain raw data: daily price (well, you could also have finer grain data) financial reports: balance sheet, income statement, cash flow computed ratios, eg. P/E, beta some popular indicator or evaluation values Crunch of his own indicator or measure using these data Draw a graph here and there to visualize his results Search for pattern, signal, clue... Challenges & Values It's always easier said than done. If you echo the work pattern listed above, you would also recognize the challenges, thus the values this tool is hoping to create: Getting data Surprisingly it is rather difficult to find a free data source for stock data. For this tool, we have opted to use the Yahoo! finance API , and in particular, the yahooquery library, as the data source. If you have access to other data, the tool can be easily extended by TBD: write plugin ; A value of this tool is to handle API of available data sources so to retrieve available raw data. Cleansing data Data quality is the next challenge. By establishing a solid data model in the backend, the tool takes care of cleansing and normalizing the data before serving them for consumption. Headaches such as missing data points, divided by zero exception are handled as much as possible by the tool. 2nd value of this tool is to normalize these data points, and potentially amending missing data by providing reasonable default. Computation of ratios, percentages In stock analysis, straight-off-the-SEC-report data, such as a sales figure, is less interesting than comparisons. For example, it's less useful to know that AMZN's last reported sales was 68B than to know that the sales grew or shrank by 8% 2 over this period. Further, one can now see other questions to ask, such as whether the 8% is lower or higher than AMZN's average, or its peer's... and so on. Further, any financial book or blog has a long list of ratios calculated from reported values, and many of these ratios are not readily available by just looking at Yahoo! or Google. Therefore, they often require the user to do the computation themselves. In this tool, we have included many of the ratios, percentages, and side-by-side comparisons so to ease the pain. Therefore, 3rd value of this tool is to provide some computed values out of box. One beauty of historical data is that they don't change. Therefore, a pre-calculated result is as good as new. RESTful ready The backend readily serves a RESTful API. Thus it is ready to integrate with another toolchain of your choice. We strive to provided a good user experience w/ our frontend implementation. However, we also anticipate that needs vary. See the [API doc][] for details. System design Stock app high level design System is split into backend and fronend. Backend is a Django app w/ exposed REST API using Tastypie . Frontend is React . Primary data source is Yahoo's financial data. In particular, I'm pulling these: historical stock daily prices — high, low, open, close, volume financial statements — balance sheet, income statement, and cash flow statement published meta — beta, P/E, and so on. Since these are opinionated, Yahoo is just one of many alternatives. Data model Model names are intuitive. Name Description MyStock Place for name, symbol MyStockHistorical Daily trading data MyStrategyValue Pre-computed values based on historical, eg. moving average IncomeStatement As name BalanceSheet As name CashFlow As name ValuationRatio Published valuation ratios, eg. P/E. They are source dependent. Stock app data models Data persistence & processing Data persistence is MySql 5.7. Using Django's ORM, this is not a hard requirement if your preference is something else. Data processing is handled by Redis via Celery so to achieve ease of scale. As mentioned earlier, MyStrategeValue are derived from historicals, thus are computed prehand using this mechanism: Django custom command → compose celery task → submit task to Redis queue → task executed and data is persisted to DB. There are also custom model property which is computed on the fly. Most of them can be pre-computed also since historicals are essentially static after a day. However, to minimize dependency on these values that must be prepared as a separate step, we opted to the current method. By observation, performance penalty by not having them in DB is acceptable. Using docker, the following data volumes are used: Volume Attach to stock-data Main DB data storage redis-data Redis data storage Develop & Deployment See dev & deployment for details. Some source provide indicators such as MACD. Most, however, only provide raw/reported data such as sales of an Income Statement. My goal, therefore, is to follow the conventional train of thought by converting these values into percentage, and some period-to-period change rate, and so on, which I found myself doing a lot whenever I receive an Excel full of numbers. ↩ This is a made up example for illustration purpose. ↩","tags":"misc","url":"https://fengxia41103.github.io/stock/stock%20app%20design.html"}]}