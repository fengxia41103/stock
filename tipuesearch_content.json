{"pages":[{"title":"Notes","text":"One thing we find useful for beginners is study note. The experience of researching a stock is not different from your class — you take notes, jog down your thoughts, review them, and learn from mistakes. Rather than keeping your notes outside the system, our Notes function is for you to keep your thoughts close to where the data is. Create a new note Creating a new note is easy. We provided a powerful Markdown editor that has rich features. Creating a new note Once a note is created, one can also edit it or delete it if needed. Types of notes There are two types of notes: one of general purpose, and one of a specific stock. The two are nearly identical in all aspects except the latter is created from a stock's detail page, thus having a clear association w/ a stock at creation, while the other is created from the Notes list page, thus having no special dedication to a stock. There is no limitation on contents for either stock. The distinction only becomes important when you use the Preduction function (see next). Prediction Make a prediction The Prediction is a feedback loop to help user hone in his judgment and understanding of his material. When writing a note, user is required to make a prediction for the stock this note is linked with. For general purpose note, the prediction is applied to a S&P500 INDEX 1 , thus you can view it as a prediction of the general market . For stock specific note, the prediction is for that stock only. There are only two options: up, or down. Default is UP. Review notes Reviewing note is the best way to recall what the market was like then, what was on my mind, and how well my understand/prediction panned out comparing to the real market. A sample note Stock tracker All symbols in the notes would be picked up automatically and tracked. Each symbol has three data, from left to right: close price on the date the note was created latest close price return % between these two price points Notes stock tracker Taking CCL in the picture as example, its price was at $21.16 on 8/3/201, the day this note was created. Now its latest price is at $24.69, representing a 16.68% gain from 8/3. Therefore, you can use this to review what you wrote and thought about CCL on 8/3, and see how well you have judged its performance. Prediction checking Use the creation timestamp, the tool will indicate the price point the prediction was made against. A thumb up or down would then indicate whether the current price makes the prediction true or false. Notes prediction checking In this example, the price point was at $439.46 on 8/3, and our prediction was that it would go up, and it did! We are using VOO by default. This is subject to change to SPY or equivalent in the future. ↩","tags":"misc","url":"https://fengxia41103.github.io/stock/notes.html"},{"title":"Price Trending","text":"Trending function is a unique feature we don't find in other tools. The idea is: if I could rank the stock's performance , how to see this performance changes over time? If ranking was a snapshot in time based on the latest data available, trending now introduced a time line which makes the comparison much interesting. Trending Values We provide trending on these indexes: Value Description Gainer positive daytime return % Loser negative daytime return % Volume reported volume/share outstanding Volatility (high-low)/low Last Lower see stock trend Next Better see stock trend User can set a date range by changing the end date (default to TODAY), and how far back he wants to go (default to 1 week). Trending controls Top Ranks Top ranks show ranks of each day based on selected value index and the time period. There are two types of view we provide: a static/matrix view, and a race chart. Matrix view The matrix view shows the ranks in a grid. Each column represents a date. Dates are arranged in order with the most recent shown first (from left to right). Each symbol is color coded, assisting user to quickly identify a pattern, for example, a certain symbol/color is on the rise or falling. Trending top ranks In this example, we can quickly observe a few things about volumes: AMC is dominating, meaning lots of transactions are happening, CCL, AMD, ROKU, TSL, EDU, DKS were also busy, BB got some attention in the last couple days but not before, .... you get the idea. NOTE that these rainbow colors are auto-generated to provide the largest contrast. However, due to limitation of the algorithm, some colors may become hard to distinguish visually. Changing any control value would force a re-assignment of colors. Thus, user can repeat this till he finds a color combination he likes. Race chart Using the toggle control user can switch between the matrix view and a race chart. The race chart is a great way to watch how a stock's rank changes over time in comparison to its peers. The race can be paused and rerun . Your browser does not support the video tag. /* instead of the last line you could also add the flash player*/ Overall Score A day-to-day is great, but how to evaluate a stock's if it had a top position one day, but a 3rd place another, then maybe not even show up on some days? To address this we have developed a score to include both its position on a given day and its frequency of on the list. We assign a 1-10 points to each position, with top position worth 10 points, 2nd place 9 point, and so on. Then we keep score for each stock in this analysis and compute a total points, thus the score. Now rank them by this score and view price chart of the top 5 of them. Here in the example we are showing a two week score of gainers . NET (green) ranked top and indeed its price went up slightly. However, EDU (blue) by comparison underperformed even though it had a 2nd place in score. This became sensible when we also look at the ranking matrix (below). EDU had high score because it scored high position 3 our 4 times it made the list. So during the days it missed the list it must have had quite a down time, thus explained why its actual price was underperformed despite of its high score. Trending overall score Occurrences Occurences counts the time a stock made to a list. The meaning of the list depends on the value index you have selected. For example, being often on the gainer list speaks well of a stock, while being often on the loser list doesn't. Occurrences are grouped into two: greater than or equal to 50%, and less than 50%. For each stock, a chart is drawn to exactly how many days (as percentage of the total days selected) it made to the list. In this example below, showing the occurrences of volume ranks, we could suspect that AMC w/ its 95% of the time in the list saw more market attention than DKS w/ a 75% in. Make sense? Trending occurrences daytime return % = (close-open)/open ↩","tags":"misc","url":"https://fengxia41103.github.io/stock/trending.html"},{"title":"Rankings","text":"Now with each stock having an army of indexes computed from its price, statements and so on, one's ultimate goal is to use them to select the good stock. Instead of building a complex filter, we simplify the picking by ranking stocks along these indexes, and provide a rich feature using these rankings to help you verify your stock picking strategy. Overview Stock ranking overview There are five categories of data point we are providing: by ROE analysis: reported ROE, DuPont ROE by balance sheet analysis by income statement analysis by cash flow statement analysis by valuation ratios: P/E, P/B, P/S Ranking could be from high-to-low or low-to-high depending on the meaning of that particular index. For example, for current ratio , higher is better, thus it is ranked from high to low, whereas for debt growth rate , we view a growing debt negatively, thus it is ranked low to high. WARNING : Due to stocks having different reporting periods, there isn't an alignment to compare A's balance sheet on date XYZ w/ the B's on the same date — the data were simply not available. Therefore, these ranking values are using the latest one in our data source. Color coding & top ranks There are two controls on the top of the page where user can set to bring more information to light: filter by symbol, and top ranks. Set top ranks By default we show the top 5 of each index. User can use the _top ranks` control to adjust this, for example, to view top 10. The max is limited by how many stocks you have added in your portfolio. Stock ranking set top ranks NOTE that rankings are computed on the fly. Therefore, the higher this number is, the more computation load it presents to the tool. So it will be much longer to show a top 20 than to show a top 3. Color coding Color coding is a great feature to visualize how a stock is positioned according each ranking. Instead of viewing all ranked stocks generally, user can input a list of stock symbols using space delimited or comma delimited format, and the symbol will be automatically assigned a color for visual highlight. Stock ranking color coding In this example, UPS ranked the best for equity growth rate . However, it didn't make the top 9 for any other indexes. FB , by contrast, ranked well for most of the balance sheet indexes, but also missed on the debt growth rate list (for better or worse). Ranking Each ranking provides a list of controls which mean to provide context to the ranks. From left to right, they are: rank bar chart, price comparison chart, and value threshold. Stock ranking controls Rank bar chart When to research these ranks, we want to see how the values are relative in strength to each other. There are two ways to get the values: hovering mouse over the stock symbol, or show the rank bar chart. Clicking the bar chart control will toggle. Stock ranking bar chart Here in this example, we now see not only the rankings in order, but a sense of strength in this side-by-side comparison. NET's current ratio is 6.78 , about 1/2 of the SNDL's, thus is a distant second by this measure. Price comparison chart Viewing a rank often leads to the question whether this rank is reflected in the stock's performance. By showing the price of these stocks over the last 30 days , user can examine how the price is corresponding to this particular index. In our view, this is a great way to test a theory (or dismiss a myth) that \"stock A is better than stock B because it has a better [ fill in an index name ]\". Stock ranking price chart Value threshold For some indexes we have also implemented value threshold. We support equation of > (greater than), >= (greater than or equal to), < (less than), and <= (less than or equal to). User can use these thresholds to further narrow down the ranking list for research. NOTE that these thresholds are not saved once you leave the page. Stock ranking value threshold","tags":"misc","url":"https://fengxia41103.github.io/stock/rankings.html"},{"title":"Technical Indicators","text":"Technical analysis is mainly based on react-stockcharts . We currently support the following indicators: Bollinger Band, Elder Ray, SAR, Full Stochastics Oscillator, Heikin-Ashi, MACD, and Relative Strength (RSI). More indicator visuals will be added in future. Date range User can set a date range by using the date picker. Default end date is TODAY, and start date is 1-month from TODAY. Depending on the indicator, this default date range may not provide enough data points for the analysis, thus the first appearance of the chart may look incomplete. In this case, user should adjust the range to provide more data points. Graph will refresh automatically when date range is changed. NOTE that switching between indicators will reset the date range. Stock technical indicator date picker Bollinger Band See wiki . Example of Bollinger Band Elder Ray See intro . Example of Elder Ray SAR See wiki . Example of SAR Full Stochastics Oscillator See wiki . Example of Full Stochastics oscillator Heikin-Ashi Read here . Example of Heikin Ashi MACD See wiki . Example of MACD Relative Strength (RSI) See intro . Example of RSI","tags":"misc","url":"https://fengxia41103.github.io/stock/technical%20indicators.html"},{"title":"Stock Valuation Models","text":"We offer analysis of four valuation methods: DuPont ROE model, discounted cash flow model, valuation ratios such as P/E, P/B, and net asset value. DuPont ROE DuPont ROE model is \"a useful technique used to decompose the different drivers of return on equity (ROE)\". In a nutshell it breaks down a single ROE value into three components: net profit margin % : Some businesses are by nature high profit margin but small volume, such as a luxury brand, while others are the opposite, eg. WalMart. Thus a trend of this aspect shows whether the business is performing as expected, or has shifted its strategy. asset turn over % : Wholesale business such as WalMart often rely on thin margin but large volume, thus shows a high asset turn over rate. equity multiplier : In other words, debt leverage over equity. Borrowing power is a magnifier, and it works both ways. Yahoo! API provides a latest ROE value. However, our tool take this one step further by computing the ROE value of each reporting period. By doing so the tool also shows how the ROE value and its DuPont factors change over time. Thus the user gets a sense how the business is growing or deteriorating. Stock ROE DuPont Model In the example, AAPL's ROE (blue) jumped based on the 3/31/2021 reporting data. DuPont model shows that its profit margin and debt leverage didn't change much, and the drive of this jump was mainly by an increase of asset turnover rate (green). Further, if we examine the net profit margin vs. the debt leverage, we would see that the debt leverage was growing from 1 to 1.2, while the net profit margin grew even quicker from 1 to 1.3 . Now to think of it, if AAPL had a higher margin, an explosive volume, and not taking on much debt, I would say its business is in a good shape by this valuation. Example DuPont Model: net profit vs. debt leverage Discounted Cash Flow (DCF) DCF model is a fairly complex one. There are many assumptions involved, each could have throw off the estimation significantly into insensible land. Here we are not to offer a better DCF number. Rather, it is to give user the power to tweak and test these assumptions and see their effect on the estimation, thus allowing user to test his methods as well as honing his understanding w/ quick feedbacks. Another thing worth noting is many of the DCF templates/tools on the web use average to smooth out sales or cash flow and so forth, and usually provides a single DCF value in the end. Ours, instead, computes per each reporting period using its reported data only . Due to the data quality of our data source, some stocks may have a missing data point in a reporting period. In this case, we look back for the closest reporting period that can provide this value and use that. All these would introduce distortion to the estimation. However, as a modeling tool, we think the benefit of being able to see the estimation changes over time outweighs the tradeoffs. Stock DCF assumptions risk free rate : Default 1.242% . However, one should look up the published Treasury Rates for an up-to-date value. project years : Default 5 , meaning we are projecting its sales for these many years. There is also an underline assumption that the business would exist for this long. growth rate : Projected free cash flow growth rate per year. Default to 7% . terminal growth rate : Default to 1% . The DCF model is sensitive to this value. market premium : Default to 7% . cost of debt : Default to 10% . Changing any of these assumptions would refresh both the chart and table w/ newly computed values. As our practice, the chart is drawn w/ data normalized, thus showing both their relative strength to each other, and a trend over time. Stock DCF chart Stock DCF table In the table, we list all the values used in this valuation, thus allowing user to further verify and investigate, for example, for outlier values based on his own judgment or knowledge. Most of the values are self-explanatory. A few are discussed below: Value Description Last Close Price The close price on the reporting date Discounted Cash Flow Valuation Estimated DCF price Valuation/Price Ratio DCF price / last close price Cost of Equity risk free + (beta * market premium) We assume a constant cost of equity . This is obviously inadequate. However, since we do not yet allow changing risk free rate, beta and market premium per reporting period, this value is used in all periods' estimation. This will be improved in future releases. The valuation/price ratio is meant to show how well the DCF estimation was compared to the actual market. A value greater than 1 means DCF was more optimistic than the market, and a value less than 1 is the opposite. Therefore, by testing different assumptions, the tool provides a feedback loop to the user how likely his assumptions were approximating the actuality. Market may not be always right. But it's being very wrong is rare, also. Valuation Ratios These valuation ratios are published by the data source. Thus, here the tool simply present them as reported. Stock Valuation Ratios Net Asset Value (NAV) These values are published by the data source. Stock NAV model These values are normalized as 1 being the base. ↩","tags":"misc","url":"https://fengxia41103.github.io/stock/stock%20valuation%20models.html"},{"title":"Stock Financial Statements","text":"Financial statements are called fundamentals. It is outside the scope of this doc to explain what these statements are and how to read them. As stated in the design , the reported values were often found less useful without computing a ratio, a percentage, or period-to-period comparison. Therefore, this tool takes on the data crunching by providing such computation and comparisons. Four data categories This is applicable to all three statements. On each page one would find data grouped into four categories: reported : These are straight out-of-report numbers. NOTE that units are often omitted and a unit of billion is implied. For example, shared issued of 17.14 would be 17.14 billion shares, whereas working capital of 44.75 would be 44.75 billion dollars. ratio : Ratios are common technique in financial statement analysis. We have covered many of them so far, and the list will continue to grow w/ newer releases. period-to-period growth rate (%) : Using quarterly statement data provided by the Yahoo! API, we picked some data points to compute its growth rate from quarter to quarter. NOTE that all the data points on a statement can be subjected to this calculation. However, we have limited the list on purpose, and will consider to expand this list in the future. A-over-B as % : This is another common technique to establish a relative position between two values. For example, what percentage is the administrative expanse ( A ) over sales ( B ) 1 ? Normalized comparison chart When we analyze financial statement, the number itself isn't interesting. It is their relative position and trend what we are really after. Therefore, we applied normalization — taking the first value as the base , then divide the rest of the data each to the base. Thus, an array [2,3,4,5,6,...] would produce a base of 2 , and the normalized array would be [1,1.5,2,2.5,3,...] . Now w/ normalized data, we could put data points side-by-side to see which is rising and which is falling at the same time, and who is rising/falling faster 2 . Stock statement normalized chart In this example, both the working capital (purple) and quick ratio (black) were deteriorating over time while the working capital fared worse as it had a sharper slope. Balance Sheet Reported Data Calculation Share Issued as is Common Stock as is Retained Earnings as is Cash & Equivalents Per Share (cash & cash equivalent)/(share issued) Working Capital as is Invested Capital as is Tangible Book Value Per Share (tangible book value)/(share issued) Ratios Data Calculation Current Ratio current assets/current liabilities Quick Ratio see below Debt/Equity Ratio total debt/stockholders equity Equity Multiplier total assets/stockholders equity Working Capital/Current Liabilities working capital/current liabilities Price/Cash Premium cash and equivalents per share/latest close price Quick ratio : (cash & equivalents & short-term investments + 50% of account receivable - inventory)/(current liabilities) . NOTE that we take into account for a 50% account receivable loss. We are also assuming a total loss of inventory. Price/Cash Premium : Can the company redeem today's close price w/ nothing but its cash!? This is a what-if analysis if stock investors were to take higher priority than creditors if the company went belly up today ~~ Period-to-Period Growth Rates (%) Data Calculation Shares Issued (this period - last period)/last period Equity same Debt same Account Payable same Account Receivable same Cashes same Working Capital same Invested Capital same Net PP&E same A-over-B as % Data Calculation Capital Structure total debt/total assets Total Liabilities/Total Assets as name Current Assets/Total Assets as name Retained Earnings/Equity retained earning/stockerholders equity Inventory/Current Assets as name Cash Equivalents/Current Assets cash & equivalents & short-term investments/current assets Mathematically it is identical to a ratio, just a different name. ↩ NOTE that this technique has been applied broadly to many charts in the tool. You will see this a lot. ↩","tags":"misc","url":"https://fengxia41103.github.io/stock/stock%20financial%20statements.html"},{"title":"Stock Trend","text":"In the stock price analysis , we have seen the analysis of gain probability by computing its likelihood of making a gain in the selected period. In this trend analysis page, we extend the analysis further by looking at each day's price, especially the down days', to measure its significance — \"if I see a price dip, how big a dip it was?\" Price time span Price time span is a way to analyze one day's close in the context of both in the history and in the future. Last lower First, we search into the history for a price lower than this price, then counting the days between the two dates. This value represents the last time I have seen a price lower than this. We call this the last lower . Now imagine a day when AAPL went down, was $5, or 5% a lot? Should I buy this dip? The last lower value, say, 30, would mean that this dip just put AAPL back to its 30 day's ago. Therefore, if you had bought it 30 days back and held till this moment, you would have gained zero. This value is useful if you are more accustomed to think in term of time than of $5 or 5% return. It is translating that $5 into a time-based measure. Stock last lower In this example, AAPL lost 40 days' worth of ground on 9/20/2021, and clearly you could see the negative trend became larger and larger starting 9/13. Next better Inverse to the last lower , we now turn our lens into the future when standing on a date. The next better is to count days between this date and the next price higher than me . If the stock is on a rising trend, this value would always be 1, meaning you see a higher price on the next day. Similarly, a 0 is the day when the price peaked out because we can't any higher price, and a large value is the time it took while for the stock to recover. Stock next better So to sum it up, these two are measuring a price's significance in term of time, thus highlight a stock's price trend. last lower next better 0 at bottom, or continuously rising at peak, or continously falling 1 or -1 reverse previous trend reverse previous trend large value significant drop slow recovery Gain bought today & hold Gain bought today & hold is an evaluation if you were to buy at the day's close price 1 and hold till the end of the selected period. The gain = (last close today's close)/today's close . Stock gain bought today & hold In this example, AAPL would have rendered most of the days a loss if you had invested because its last close price was low. The larger the negative area, the more significant the difference is between its high price points and low price points. Inversely, one could imagine that area would be in the positives if stock had a rising week. Daily gain probability This is a sibling analysis of the gain probability ranges on the stock price view. Instead of a range, we present a day-by-day view of how a gain probability will change over time, thus highlighting a moving trend of this value. Stock gain probability daily trend In this example, AAPL had good gain probability at the start, indicating the price then was good. However, the probability shrank because price started rising. On 9/8 it reached 0, meaning the close was the peak for its remaining days. Then it started its decline. On 9/16 it had a good open , the only one in the last 4 days. This made the close price on 9/15 having a 25% chance of making a gain. The close price was chosen rather arbitrarily. We have no assumption of someone's trading habit — whether he likes to buy at market opening, or close, or in between. Therefore, the analysis demonstrates the power of the tool and what it can deliver. Choosing a different price point for the calculation will be addressed by future features. ↩","tags":"misc","url":"https://fengxia41103.github.io/stock/stock%20trend.html"},{"title":"Stock Returns","text":"There are three types of return: daily, nightly, and 24-hour. Return values are in percentage (%) , and negative returns are colored in red . Since the analysis done to them are similar, we are to address them together here. daily return : (today's close - today's open)/today's open . This measures the return during normal market hours. nightly return : (today's open - yesterday's close)/yesterday's close . This measures the return during off market hours. 24-hour return : (today's close - yesterday's close)/yesterday's close . This measures the over effect of a 24-hour day, thus including both the market hours and off market hours (for example, many companies choose to make announcement after market close, thus causing price to fluctuate prior to next day's market opening). Stock 24-hour return chart Now with computed returns, we do some basic counting and statistic analysis of the return data. positive vs. negative occurrence This answers that out of the return data, how many were positive and how many were negative. If a stock were on a rise, we would expect it having more positive days than negative ones. However, this takes no account for the scale of each positive/negative return. Stock 24-hour return positive vs. negative occurances In this example, this stock has had 40% positive days vs. 60% negative days. One would thus think it wasn't performing well over this period. return statistics These are some common statistic values computed over the return data, including average, max, min, median, standard deviation, range of, variance, skewness, Kurtosis, average of positive returns, average of negative returns, and compounded return (= product of all returns). Stock 24-hour return statistics","tags":"misc","url":"https://fengxia41103.github.io/stock/stock%20returns.html"},{"title":"Stock Price","text":"Stock's price and return views are part of the stock's detail analysis. In this section we will show in-depth analysis of stock's price trending and returns. Date range User can set a date range by using the date picker. Default end date is TODAY, and start date is 1-month from TODAY. Stock historical price date picker Default end date is TODAY, and the default range is set to be 30 days back from TODAY. Setting an insensible date range, eg. start date is greater than the end date, or some distant dates in the future, will not produce an error. Instead, the backend will return an empty date set, thus rendering this view blank. Historical daily price Price line chart Price line chart is the quickest way to see how a stock is going. The chart includes prices of open , close , high and low . Stock historical price line chart Weekly price chart The weekly price chart breaks down price over the selected date range so to zoom into each week's performance as well as each week's end-2-end return = (week's close - week's open)/week's open . Like all other charts, clicking legends will toggle a data set on/off. Stock historical weekly price chart Gain probability ranges Stock gain probability The gain probability range is to address this common question — if I buy stock at this price, how likely I would make a positive return? To answer this, we create 10 ranges over 0-100%. Then we would use each day's price to estimate which range its probability will fall into. percentage : The percentage measures the total likelyhood you will get a positive return counting day by day. Taking a historical, pretending we can look into the future (thus we have a God's view), counting days when you could make a gain w/ a higher price. The percentage of this count vs. the total days elapse from this date represents a probability. For example, if there are 10 days out of 30 days this one could have made a gain on this current price, the probability will be 10/30=33% . open price : This is the minimal open price you could have purchased to achieve the percentage above. Continuing the example above, if there were 10 days one could have made a positive return, we sort and display the lowest open price, thus assuming you would have paid the least for such a gain probability. A n/a means no price could have achieved such probability 1 . time window gauge : Time window is the days left if you made purchase on a day. For example, buying at $148.56 (the 30-20% probability one) would have less trading days left for you to get out, than buying at $153.87 (the 40-30% probability one). The best pattern would be a high probability and a long trading window to realize such probability. the TODAY-is-cheaper flag : The flag uses the latest known close price (as a proxy to the SPOT price) to compare with the suggested open price above. If the close is less than the open , it puts a flag indicating the current price is more attractive than the open we saw before 2 . It may now seem pointless why one would care such probability at all if it tells no future. However, these probabilities give you a reference point against current price so you get a sense of how it had (or could have) behaved. WARNING : We choose open pretending you are buying it on the beginning of day. Of course, the actual purchase price would be different. So this price value is more of a sense how well it will fare instead of being a precise point to act upon. ↩ WARNING : This is not a guaranteed winner because the stock price may be on a sliding trend, thus a lower price now doesn't warrant you would be able to realize the gain even. For example, if the close price is today's, the probability is only testifying that such price could have made gains in the past, but has no predicting power whatsoever. ↩","tags":"misc","url":"https://fengxia41103.github.io/stock/stock%20price.html"},{"title":"Dev & Deployment","text":"Both the backend and the frontend have been dockerized. Thus, regardless your platform, install Docker & docker-compose first. For user Clone the repo . Go to the project root folder, docker-compose up --build -d . Create a backend admin user: docker-compose run web python manage.py createsuperuser , and follow the instructions. Email is optional. Go to browser http://localhost:8084 , and use the user account to login. Now you should be ready to use the application by adding stocks and sectors. For developers Modify code Using the docker way is preferred. Code will be mounted into the docker as volume (see docker-compose.yaml for details). Thus changes done on your local editor will be reflected in the running docker as live . Debugging It may sound 1980. But the most effective way is to use docker-compose logs -f <service name> to see stack trace and/or error messages. Testing Looking for volunteers !! For network admins networks Network of the setup is fairly simple. We distinguish data vs. management : Stock app networks ports I try to limit exposure of ports on docker host so this application can be easily co-hosted with others without causing port conflicts. In essence, 8084 is the frontend UI port, and 8003 is the backend API port. All others are docker-to-docker only. Component Docker Port Service Host Map Frontend 80 Main frontend app w/ Nginx built-in 8084 Backend 80 Nginx proxy 8003 Backend 3306 MySql DB none Backend 8001 Django app none Backend 6379 Redis none Port mapping can be changed in docker-compose.yml . For example, if to change the frontend proxy from 8084 to 9999 , change the line ports from 8084:80 to 9999:80 . See docker-compose doc for details. frontend : .... ports : - \"8084:80\" # <========= change this line! ....","tags":"misc","url":"https://fengxia41103.github.io/stock/dev%20and%20deployment.html"},{"title":"Stock App Design","text":"Disclaimer, philosophy First of all, this isn't a magic tool to beat the market. We firmly believe the final conclusion should be drawn by the user whose brain power holds the edge over the market, if ever. The purpose of this tool is to assemble information in a fashion to assist the user process these information more efficiently by liberating his/her from tedious, but necessary, steps such as data collection, ratio computation, drawing a line graph, etc., than without such a helper. Thus with this tool, the user could focus onto creating value instead of being bogged down by less value-added works. Audience & goals This application is written for users who have interest in the stock market, in particular, data analysis of the stock data. In my experience, there are five levels of users: Type Tool Audience 1 apps & websites Satisfied with the published info 2 Excel Think they have some data/info analysis edge 3 Excel + VBA Automate routine computation and data assembly 4 Script or lib Programmer who gained more computation power over Excel 5 Commercial Professional, sky is the limit, membership If you are type 5, you probably have advanced tool & knowledge for the work. But if you are type 1-4, you can have now more computing power and better user experience at hand. A common pattern/workflow these users follow: Obtain raw data Crunch of his own indicator or measure using these data Draw a graph here and there to visualize his results Search for pattern, signal, clue... Challenges & Values It's always easier said than done. If you echo the work pattern listed above, you would also recognize the challenges, thus the values this tool is hoping to create. Getting data Surprisingly it is rather difficult to find a free data source for stock data. For this tool, we have opted to use the Yahoo! finance API , and in particular, the yahooquery library, as the data source. If you have access to other data, the tool can be easily extended by TBD: write plugin ; A value of this tool is to handle API of available data sources so to retrieve available raw data. Cleansing data Data quality is the next challenge. By establishing a solid data model in the backend, the tool takes care of cleansing and normalizing the data before serving them for consumption. Headaches such as missing data points, divided by zero exception are handled as much as possible by the tool. 2nd value of this tool is to normalize these data points, and potentially amending missing data by providing reasonable default. Computation of ratios, percentages In stock analysis, straight-off-the-SEC-report data, such as a sales figure, is less interesting than comparisons. For example, it's less useful to know that AMZN's last reported sales was 68B than to know that the sales grew or shrank by 8% 2 over this period. Further, one can now see other questions to ask, such as whether the 8% is lower or higher than AMZN's average, or its peer's... and so on. Further, any financial book or blog has a long list of ratios calculated from reported values, and many of these ratios are not readily available by just looking at Yahoo! or Google. Therefore, they often require the user to do the computation themselves. In this tool, we have included many of the ratios, percentages, and side-by-side comparisons so to ease the pain. Therefore, 3rd value of this tool is to provide some computed values out of box. One beauty of historical data is that they don't change. Therefore, a pre-calculated result is as good as new. RESTful ready The backend readily serves a RESTful API. Thus it is ready to integrate with another toolchain of your choice. We strive to provided a good user experience w/ our frontend implementation. However, we also anticipate that needs vary. See the [API doc][] for details. System design Stock app high level design System is split into backend and fronend. Backend is a Django app w/ exposed REST API using Tastypie . Frontend is React . Primary data source is Yahoo's financial data. In particular, I'm pulling these: historical stock daily prices — high, low, open, close, volume financial statements — balance sheet, income statement, and cash flow statement published meta — beta, P/E, and so on. Since these are opinionated, Yahoo is just one of many alternatives. Data model Model names are intuitive. Name Description MyStock Place for name, symbol MyStockHistorical Daily trading data MyStrategyValue Pre-computed values based on historical, eg. moving average IncomeStatement As name BalanceSheet As name CashFlow As name ValuationRatio Published valuation ratios, eg. P/E. They are source dependent. Stock app data models Data persistence & processing Data persistence is MySql 5.7. Using Django's ORM, this is not a hard requirement if your preference is something else. Data processing is handled by Redis via Celery so to achieve ease of scale. As mentioned earlier, MyStrategeValue are derived from historicals, thus are computed prehand using this mechanism: Django custom command → compose celery task → submit task to Redis queue → task executed and data is persisted to DB. There are also custom model property which is computed on the fly. Most of them can be pre-computed also since historicals are essentially static after a day. However, to minimize dependency on these values that must be prepared as a separate step, we opted to the current method. By observation, performance penalty by not having them in DB is acceptable. Using docker, the following data volumes are used: Volume Attach to stock-data Main DB data storage redis-data Redis data storage Develop & Deployment See dev & deployment for details. Some source provide indicators such as MACD. Most, however, only provide raw/reported data such as sales of an Income Statement. My goal, therefore, is to follow the conventional train of thought by converting these values into percentage, and some period-to-period change rate, and so on, which I found myself doing a lot whenever I receive an Excel full of numbers. ↩ This is a made up example for illustration purpose. ↩","tags":"misc","url":"https://fengxia41103.github.io/stock/stock%20app%20design.html"}]}