<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>My Stocks - misc</title><link href="https://fengxia41103.github.io/stock/" rel="alternate"></link><link href="https://fengxia41103.github.io/stock/feeds/misc.atom.xml" rel="self"></link><id>https://fengxia41103.github.io/stock/</id><updated>2021-09-21T23:33:00-04:00</updated><entry><title>Stock Returns</title><link href="https://fengxia41103.github.io/stock/single%20stock%20returns.html" rel="alternate"></link><published>2021-09-21T23:33:00-04:00</published><updated>2021-09-21T23:33:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2021-09-21:/stock/single stock returns.html</id><summary type="html">&lt;p&gt;There are three types of return: daily, nightly, and 24-hour. Return
values are in &lt;strong&gt;percentage (%)&lt;/strong&gt;, and negative returns are colored
in &lt;strong&gt;red&lt;/strong&gt;. Since the analysis done to them are similar, we are to
address them together here.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;daily return&lt;/strong&gt;: &lt;code&gt;(today's close - today's open)/today's
   open&lt;/code&gt;. This measures the return during normal market hours.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;nightly return&lt;/strong&gt;: &lt;code&gt;(today's open - yesterday's close)/yesterday's
   close&lt;/code&gt;. This measures the return during off market hours.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;24-hour return&lt;/strong&gt;: &lt;code&gt;(today's close - yesterday's
   close)/yesterday's close&lt;/code&gt;. This measures the over effect of a
   24-hour day, thus including both the market hours and off market
   hours (for example, many companies choose to make announcement
   after market close, thus causing price to fluctuate prior to next
   day's market opening).&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class="col s12"&gt;
    &lt;figcaption&gt;Stock 24-hour return chart&lt;/figcaption&gt;
    &lt;img src="images/stock%2024%20hour%20return%20bar%20chart.png"/&gt;
&lt;/figure&gt;

&lt;p&gt;Now with computed returns, we do some basic counting and statistic
analysis of the return data.&lt;/p&gt;
&lt;h3&gt;positive vs. negative occurrence&lt;/h3&gt;
&lt;p&gt;This answers that out of the return data, how many were positive and
how many were negative. If a stock were on a rise, we would expect it
having more positive days than …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are three types of return: daily, nightly, and 24-hour. Return
values are in &lt;strong&gt;percentage (%)&lt;/strong&gt;, and negative returns are colored
in &lt;strong&gt;red&lt;/strong&gt;. Since the analysis done to them are similar, we are to
address them together here.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;daily return&lt;/strong&gt;: &lt;code&gt;(today's close - today's open)/today's
   open&lt;/code&gt;. This measures the return during normal market hours.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;nightly return&lt;/strong&gt;: &lt;code&gt;(today's open - yesterday's close)/yesterday's
   close&lt;/code&gt;. This measures the return during off market hours.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;24-hour return&lt;/strong&gt;: &lt;code&gt;(today's close - yesterday's
   close)/yesterday's close&lt;/code&gt;. This measures the over effect of a
   24-hour day, thus including both the market hours and off market
   hours (for example, many companies choose to make announcement
   after market close, thus causing price to fluctuate prior to next
   day's market opening).&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class="col s12"&gt;
    &lt;figcaption&gt;Stock 24-hour return chart&lt;/figcaption&gt;
    &lt;img src="images/stock%2024%20hour%20return%20bar%20chart.png"/&gt;
&lt;/figure&gt;

&lt;p&gt;Now with computed returns, we do some basic counting and statistic
analysis of the return data.&lt;/p&gt;
&lt;h3&gt;positive vs. negative occurrence&lt;/h3&gt;
&lt;p&gt;This answers that out of the return data, how many were positive and
how many were negative. If a stock were on a rise, we would expect it
having more positive days than negative ones. However, this takes no
account for the scale of each positive/negative return.&lt;/p&gt;
&lt;figure class="col s12"&gt;
    &lt;figcaption&gt;Stock 24-hour return positive vs. negative occurances&lt;/figcaption&gt;
    &lt;img src="images/stock%2024%20hour%20positive%20negative%20chart.png"/&gt;
&lt;/figure&gt;

&lt;p&gt;In this example, this stock has had 40% positive days vs. 60% negative
days. One would thus think it wasn't performing well over this period.&lt;/p&gt;
&lt;h3&gt;return statistics&lt;/h3&gt;
&lt;p&gt;These are some common statistic values computed over the return data,
including average, max, min, median, standard deviation, range of,
variance, skewness, Kurtosis, average of positive returns, average of
negative returns, and compounded return (= product of all returns).&lt;/p&gt;
&lt;figure class="col s12"&gt;
    &lt;figcaption&gt;Stock 24-hour return statistics&lt;/figcaption&gt;
    &lt;img src="images/stock%2024%20hour%20return%20stats.png"/&gt;
&lt;/figure&gt;</content><category term="misc"></category></entry><entry><title>Stock Price</title><link href="https://fengxia41103.github.io/stock/single%20stock%20price.html" rel="alternate"></link><published>2021-09-21T19:22:00-04:00</published><updated>2021-09-21T19:22:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2021-09-21:/stock/single stock price.html</id><summary type="html">&lt;p&gt;Stock's price and return views are part of the stock's detail
analysis. In this section we will show in-depth analysis of stock's
price trending and returns.&lt;/p&gt;
&lt;h2&gt;Date range&lt;/h2&gt;
&lt;p&gt;User can set a date range by using the date picker:&lt;/p&gt;
&lt;figure class="col s12"&gt;
    &lt;figcaption&gt;Stock historical price date picker&lt;/figcaption&gt;
    &lt;img src="images/stock%20date%20picker.png"/&gt;
&lt;/figure&gt;

&lt;p&gt;Default &lt;code&gt;end date&lt;/code&gt; is TODAY, and the default range is set to be
30 days back from TODAY. Setting an insensible date range, eg. start
date is greater than the end date, or some distant dates in the
future, will not produce an error. Instead, the backend will return
an empty date set, thus rendering this view blank.&lt;/p&gt;
&lt;h2&gt;Historical daily price&lt;/h2&gt;
&lt;h3&gt;Price line chart&lt;/h3&gt;
&lt;p&gt;Price line chart is the quickest way to see how a stock is going. The
chart includes prices of &lt;code&gt;open&lt;/code&gt;, &lt;code&gt;close&lt;/code&gt;, &lt;code&gt;high&lt;/code&gt; and &lt;code&gt;low&lt;/code&gt;.&lt;/p&gt;
&lt;figure class="col s12"&gt;
    &lt;figcaption&gt;Stock historical price line chart&lt;/figcaption&gt;
    &lt;img src="images/stock%20price%20chart.png"/&gt;
&lt;/figure&gt;

&lt;h3&gt;Weekly price chart&lt;/h3&gt;
&lt;p&gt;The weekly price chart breaks down price over the selected date range
so to zoom into each week's performance as well as each week's
&lt;code&gt;end-2-end return = (week's close - week's open)/week's open&lt;/code&gt;. Like
all other …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Stock's price and return views are part of the stock's detail
analysis. In this section we will show in-depth analysis of stock's
price trending and returns.&lt;/p&gt;
&lt;h2&gt;Date range&lt;/h2&gt;
&lt;p&gt;User can set a date range by using the date picker:&lt;/p&gt;
&lt;figure class="col s12"&gt;
    &lt;figcaption&gt;Stock historical price date picker&lt;/figcaption&gt;
    &lt;img src="images/stock%20date%20picker.png"/&gt;
&lt;/figure&gt;

&lt;p&gt;Default &lt;code&gt;end date&lt;/code&gt; is TODAY, and the default range is set to be
30 days back from TODAY. Setting an insensible date range, eg. start
date is greater than the end date, or some distant dates in the
future, will not produce an error. Instead, the backend will return
an empty date set, thus rendering this view blank.&lt;/p&gt;
&lt;h2&gt;Historical daily price&lt;/h2&gt;
&lt;h3&gt;Price line chart&lt;/h3&gt;
&lt;p&gt;Price line chart is the quickest way to see how a stock is going. The
chart includes prices of &lt;code&gt;open&lt;/code&gt;, &lt;code&gt;close&lt;/code&gt;, &lt;code&gt;high&lt;/code&gt; and &lt;code&gt;low&lt;/code&gt;.&lt;/p&gt;
&lt;figure class="col s12"&gt;
    &lt;figcaption&gt;Stock historical price line chart&lt;/figcaption&gt;
    &lt;img src="images/stock%20price%20chart.png"/&gt;
&lt;/figure&gt;

&lt;h3&gt;Weekly price chart&lt;/h3&gt;
&lt;p&gt;The weekly price chart breaks down price over the selected date range
so to zoom into each week's performance as well as each week's
&lt;code&gt;end-2-end return = (week's close - week's open)/week's open&lt;/code&gt;. Like
all other charts, clicking legends will toggle a data set on/off.&lt;/p&gt;
&lt;figure class="col s12"&gt;
    &lt;figcaption&gt;Stock historical weekly price chart&lt;/figcaption&gt;
    &lt;img src="images/stock%20price%20chart%20weekly.png"/&gt;
&lt;/figure&gt;

&lt;h3&gt;Gain probability&lt;/h3&gt;
&lt;figure class="col l6 m7 s12"&gt;
    &lt;figcaption&gt;Stock gain probability&lt;/figcaption&gt;
    &lt;img src="images/stock%20price%20gain%20probability.png"/&gt;
&lt;/figure&gt;

&lt;p&gt;The gain probability is to address this common question &amp;mdash; &lt;em&gt;if I
buy stock at this price, how likely I would make a positive return?&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;percentage&lt;/strong&gt;: The percentage measures the total likelyhood you
  will get a positive return counting day by day. Taking a historical,
  pretending we can look into the future (thus we have a God's view),
  counting days when you could make a gain w/ a higher price. The
  percentage of this count vs. the total days elapse from this date
  represents a probability. For example, if there are 10 days out of
  30 days this one could have made a gain on this current price, the
  probability will be &lt;code&gt;10/30=33%&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;open price&lt;/strong&gt;: This is the minimal &lt;code&gt;open price&lt;/code&gt; you could have
  purchased to achieve the percentage above. Continuing the example
  above, if there were 10 days one could have made a positive return,
  we sort and display the &lt;strong&gt;lowest&lt;/strong&gt; open price, thus assuming you
  would have paid the least for such a gain probability. A &lt;code&gt;n/a&lt;/code&gt; means
  no price could have achieved such probability&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;time window gauge&lt;/strong&gt;: Time window is the days left if you made
  purchase on a day. For example, buying at $148.56 (the &lt;code&gt;30-20%&lt;/code&gt;
  probability one) would have less trading days left for you to get
  out, than buying at $153.87 (the &lt;code&gt;40-30%&lt;/code&gt; probability one). The best
  pattern would be a high probability and a long trading window
  to realize such probability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;the TODAY-is-cheaper flag&lt;/strong&gt;: The flag uses the latest known
  &lt;code&gt;close&lt;/code&gt; price (as a proxy to the SPOT price) to compare with the
  suggested &lt;code&gt;open price&lt;/code&gt; above. If the &lt;code&gt;close&lt;/code&gt; is less than the
  &lt;code&gt;open&lt;/code&gt;, it puts a flag indicating the current price is more
  attractive than the &lt;code&gt;open&lt;/code&gt; we saw before&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It may now seem pointless why one would care such probability at all
if it tells no future. However, these probabilities give you a
reference point against current price so you get a sense of how it had
(or could have) behaved.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: We choose &lt;code&gt;open&lt;/code&gt; pretending you are buying it on the
beginning of day. Of course, the actual purchase price would be
different. So this price value is more of a sense how well it will
fare instead of being a precise point to act upon.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: This is not a guaranteed winner because the stock price may be
on a sliding trend, thus a lower price now doesn't warrant you
would be able to realize the gain even. For example, if the
&lt;code&gt;close&lt;/code&gt; price is today's, the probability is only testifying that
such price could have made gains in the past, but has no
predicting power whatsoever.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="misc"></category></entry><entry><title>Dev &amp; Deployment</title><link href="https://fengxia41103.github.io/stock/dev%20and%20deployment.html" rel="alternate"></link><published>2021-09-21T11:00:00-04:00</published><updated>2021-09-21T11:00:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2021-09-21:/stock/dev and deployment.html</id><summary type="html">&lt;p&gt;Both the backend and the frontend have been dockerized. Thus,
regardless your platform, install Docker &amp;amp; &lt;code&gt;docker-compose&lt;/code&gt; first.&lt;/p&gt;
&lt;h2&gt;For user&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Clone the &lt;a href="https://github.com/fengxia41103/stock"&gt;repo&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Go to the project root folder, &lt;code&gt;docker-compose up --build -d&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create a backend admin user: &lt;code&gt;docker-compose run web python
   manage.py createsuperuser&lt;/code&gt;, and follow the instructions. Email is
   optional.&lt;/li&gt;
&lt;li&gt;Go to browser &lt;code&gt;http://localhost:8084&lt;/code&gt;, and use the user account to
   login.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now you should be ready to use the application by adding stocks and
sectors.&lt;/p&gt;
&lt;h2&gt;For developers&lt;/h2&gt;
&lt;h3&gt;Modify code&lt;/h3&gt;
&lt;p&gt;Using the docker way is preferred. Code will be mounted into the
docker as &lt;code&gt;volume&lt;/code&gt; (see &lt;code&gt;docker-compose.yaml&lt;/code&gt; for details). Thus
changes done on your local editor will be reflected in the running
docker as &lt;code&gt;live&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Debugging&lt;/h3&gt;
&lt;p&gt;It may sound 1980. But the most effective way is to use
&lt;code&gt;docker-compose logs -f &amp;lt;service name&amp;gt;&lt;/code&gt; to see stack trace and/or
error messages.&lt;/p&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;p&gt;Looking for &lt;strong&gt;volunteers&lt;/strong&gt;!!&lt;/p&gt;
&lt;h2&gt;For network admins&lt;/h2&gt;
&lt;h3&gt;networks&lt;/h3&gt;
&lt;p&gt;Network of the setup is fairly simple. We distinguish &lt;code&gt;data&lt;/code&gt; vs. &lt;code&gt;management&lt;/code&gt;:&lt;/p&gt;
&lt;figure class="col s12 center"&gt;
  &lt;img src="images/backend%20network.png"/&gt;
  &lt;figcaption&gt;Stock app networks&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3&gt;ports&lt;/h3&gt;
&lt;p&gt;I try to limit exposure of ports …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Both the backend and the frontend have been dockerized. Thus,
regardless your platform, install Docker &amp;amp; &lt;code&gt;docker-compose&lt;/code&gt; first.&lt;/p&gt;
&lt;h2&gt;For user&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Clone the &lt;a href="https://github.com/fengxia41103/stock"&gt;repo&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Go to the project root folder, &lt;code&gt;docker-compose up --build -d&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create a backend admin user: &lt;code&gt;docker-compose run web python
   manage.py createsuperuser&lt;/code&gt;, and follow the instructions. Email is
   optional.&lt;/li&gt;
&lt;li&gt;Go to browser &lt;code&gt;http://localhost:8084&lt;/code&gt;, and use the user account to
   login.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now you should be ready to use the application by adding stocks and
sectors.&lt;/p&gt;
&lt;h2&gt;For developers&lt;/h2&gt;
&lt;h3&gt;Modify code&lt;/h3&gt;
&lt;p&gt;Using the docker way is preferred. Code will be mounted into the
docker as &lt;code&gt;volume&lt;/code&gt; (see &lt;code&gt;docker-compose.yaml&lt;/code&gt; for details). Thus
changes done on your local editor will be reflected in the running
docker as &lt;code&gt;live&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Debugging&lt;/h3&gt;
&lt;p&gt;It may sound 1980. But the most effective way is to use
&lt;code&gt;docker-compose logs -f &amp;lt;service name&amp;gt;&lt;/code&gt; to see stack trace and/or
error messages.&lt;/p&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;p&gt;Looking for &lt;strong&gt;volunteers&lt;/strong&gt;!!&lt;/p&gt;
&lt;h2&gt;For network admins&lt;/h2&gt;
&lt;h3&gt;networks&lt;/h3&gt;
&lt;p&gt;Network of the setup is fairly simple. We distinguish &lt;code&gt;data&lt;/code&gt; vs. &lt;code&gt;management&lt;/code&gt;:&lt;/p&gt;
&lt;figure class="col s12 center"&gt;
  &lt;img src="images/backend%20network.png"/&gt;
  &lt;figcaption&gt;Stock app networks&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3&gt;ports&lt;/h3&gt;
&lt;p&gt;I try to limit exposure of ports on docker host so this application
can be easily co-hosted with others without causing port conflicts.
In essence, &lt;code&gt;8084&lt;/code&gt; is the frontend UI port, and &lt;code&gt;8003&lt;/code&gt; is the backend
API port. All others are docker-to-docker only.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Component&lt;/th&gt;
&lt;th&gt;Docker Port&lt;/th&gt;
&lt;th&gt;Service&lt;/th&gt;
&lt;th&gt;Host Map&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Frontend&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;Main frontend app w/ Nginx built-in&lt;/td&gt;
&lt;td&gt;8084&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Backend&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;Nginx proxy&lt;/td&gt;
&lt;td&gt;8003&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Backend&lt;/td&gt;
&lt;td&gt;3306&lt;/td&gt;
&lt;td&gt;MySql DB&lt;/td&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Backend&lt;/td&gt;
&lt;td&gt;8001&lt;/td&gt;
&lt;td&gt;Django app&lt;/td&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Backend&lt;/td&gt;
&lt;td&gt;6379&lt;/td&gt;
&lt;td&gt;Redis&lt;/td&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Port mapping can be changed in &lt;code&gt;docker-compose.yml&lt;/code&gt;. For example, if
to change the frontend proxy from &lt;code&gt;8084&lt;/code&gt; to &lt;code&gt;9999&lt;/code&gt;, change the line
&lt;code&gt;ports&lt;/code&gt; from &lt;code&gt;8084:80&lt;/code&gt; to &lt;code&gt;9999:80&lt;/code&gt;. See &lt;a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#ports"&gt;&lt;code&gt;docker-compose&lt;/code&gt; doc&lt;/a&gt; for
details.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;frontend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;....&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;8084:80&amp;quot;&lt;/span&gt;  &lt;span class="c1"&gt;# &amp;lt;========= change this line!&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;....&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category></entry><entry><title>Stock App Design</title><link href="https://fengxia41103.github.io/stock/stock%20app%20design.html" rel="alternate"></link><published>2021-09-09T17:38:00-04:00</published><updated>2021-09-21T17:00:00-04:00</updated><author><name>Feng Xia</name></author><id>tag:fengxia41103.github.io,2021-09-09:/stock/stock app design.html</id><summary type="html">&lt;figure class="col s12"&gt;
  &lt;img src="images/stock-detail.png"/&gt;
&lt;/figure&gt;

&lt;h1&gt;Disclaimer, philosophy&lt;/h1&gt;
&lt;p&gt;First of all, this isn't a magic tool to beat the market. We firmly
believe the final conclusion should be drawn by the user whose brain
power holds the edge over the market, if ever.&lt;/p&gt;
&lt;p&gt;The purpose of this tool is to assemble information in a fashion to
assist the user process these information more efficiently by
liberating his/her from tedious, but necessary, steps such as data
collection, ratio computation, drawing a line graph, etc., than
without such a helper. Thus with this tool, the user could focus onto
creating value instead of being bogged down by less value-added works.&lt;/p&gt;
&lt;figure class="col l6 m6 s12"&gt;
    &lt;img src="https://imgs.xkcd.com/comics/efficiency_2x.png" /&gt;
&lt;/figure&gt;

&lt;h1&gt;Audience &amp;amp; goals&lt;/h1&gt;
&lt;p&gt;This application is written for users who have interest in the
stock market, in particular, data analysis of the stock data. In my
experience, there are five levels of users:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Tool&lt;/th&gt;
&lt;th&gt;Audience&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;apps &amp;amp; websites&lt;/td&gt;
&lt;td&gt;Have basic knowledge, satisfied with reported info&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Excel&lt;/td&gt;
&lt;td&gt;Think they have some data/info analysis edge&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Excel + VBA&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Automate routine computation and data assembly&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Script or lib&lt;/td&gt;
&lt;td&gt;Programmer who gained more …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;figure class="col s12"&gt;
  &lt;img src="images/stock-detail.png"/&gt;
&lt;/figure&gt;

&lt;h1&gt;Disclaimer, philosophy&lt;/h1&gt;
&lt;p&gt;First of all, this isn't a magic tool to beat the market. We firmly
believe the final conclusion should be drawn by the user whose brain
power holds the edge over the market, if ever.&lt;/p&gt;
&lt;p&gt;The purpose of this tool is to assemble information in a fashion to
assist the user process these information more efficiently by
liberating his/her from tedious, but necessary, steps such as data
collection, ratio computation, drawing a line graph, etc., than
without such a helper. Thus with this tool, the user could focus onto
creating value instead of being bogged down by less value-added works.&lt;/p&gt;
&lt;figure class="col l6 m6 s12"&gt;
    &lt;img src="https://imgs.xkcd.com/comics/efficiency_2x.png" /&gt;
&lt;/figure&gt;

&lt;h1&gt;Audience &amp;amp; goals&lt;/h1&gt;
&lt;p&gt;This application is written for users who have interest in the
stock market, in particular, data analysis of the stock data. In my
experience, there are five levels of users:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Tool&lt;/th&gt;
&lt;th&gt;Audience&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;apps &amp;amp; websites&lt;/td&gt;
&lt;td&gt;Have basic knowledge, satisfied with reported info&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Excel&lt;/td&gt;
&lt;td&gt;Think they have some data/info analysis edge&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Excel + VBA&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Automate routine computation and data assembly&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Script or lib&lt;/td&gt;
&lt;td&gt;Programmer who gained more computation power over Excel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;Commercial&lt;/td&gt;
&lt;td&gt;Professional, sky is the limit, membership&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;A common pattern/workflow these users follow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Obtain raw data:&lt;/li&gt;
&lt;li&gt;daily price (well, you could also have finer grain data)&lt;/li&gt;
&lt;li&gt;financial reports: balance sheet, income statement, cash flow&lt;/li&gt;
&lt;li&gt;computed ratios, eg. P/E, beta&lt;/li&gt;
&lt;li&gt;some popular indicator or evaluation values&lt;/li&gt;
&lt;li&gt;Crunch of his own indicator or measure using these data&lt;/li&gt;
&lt;li&gt;Draw a graph here and there to visualize his results&lt;/li&gt;
&lt;li&gt;Search for pattern, signal, clue...&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Challenges &amp;amp; Values&lt;/h1&gt;
&lt;p&gt;It's always easier said than done. If you echo the work pattern listed
above, you would also recognize the challenges, thus the values this
tool is hoping to create:&lt;/p&gt;
&lt;h2&gt;Getting data&lt;/h2&gt;
&lt;p&gt;Surprisingly it is rather difficult to find a free data source for
stock data. For this tool, we have opted to use the &lt;a href="https://finance.yahoo.com/quotes/API,Documentation/view/v1/"&gt;Yahoo! finance
API&lt;/a&gt;, and in particular, the &lt;a href="https://github.com/dpguthrie/yahooquery/"&gt;yahooquery&lt;/a&gt; library, as the data
source. If you have access to other data, the tool can be easily
extended by &lt;a href=""&gt;TBD: write plugin&lt;/a&gt;;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A value of this tool is to handle API of available data
sources so to retrieve available &lt;em&gt;raw&lt;/em&gt; data.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Cleansing data&lt;/h2&gt;
&lt;p&gt;Data quality is the next challenge. By establishing a solid data model
in the backend, the tool takes care of cleansing and normalizing the
data before serving them for consumption. Headaches such as missing
data points, divided by zero exception are handled as much as
possible by the tool.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2nd value of this tool is to normalize these data points, and
potentially amending missing data by providing reasonable default.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Computation of ratios, percentages&lt;/h2&gt;
&lt;p&gt;In stock analysis, straight-off-the-SEC-report data, such as a sales
figure, is less interesting than comparisons. For example, it's less
useful to know that AMZN's last reported sales was 68B than to know
that the sales grew or shrank by 8%&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt; over this period. Further, one
can now see other questions to ask, such as whether the &lt;code&gt;8%&lt;/code&gt; is lower
or higher than AMZN's average, or its peer's... and so on.&lt;/p&gt;
&lt;p&gt;Further, any financial book or blog has a long list of &lt;strong&gt;ratios&lt;/strong&gt;
calculated from reported values, and many of these ratios are not
readily available by just looking at Yahoo! or Google. Therefore, they
often require the user to do the computation themselves.&lt;/p&gt;
&lt;p&gt;In this tool, we have included many of the ratios, percentages, and
side-by-side comparisons so to ease the pain.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Therefore, 3rd value of this tool is to provide some computed values
out of box. One beauty of historical data is that they don't
change. Therefore, a pre-calculated result is as good as new.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;RESTful ready&lt;/h2&gt;
&lt;p&gt;The backend readily serves a RESTful API. Thus it is ready to
integrate with another toolchain of your choice. We strive to provided
a good user experience w/ our frontend implementation. However, we
also anticipate that needs vary.&lt;/p&gt;
&lt;p&gt;See the [API doc][] for details.&lt;/p&gt;
&lt;h1&gt;System design&lt;/h1&gt;
&lt;figure class="col s12 center"&gt;
  &lt;img src="images/high%20level%20design.png"/&gt;
  &lt;figcaption&gt;Stock app high level design&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;System is split into backend and fronend. Backend is a Django app w/
exposed REST API using &lt;a href="https://django-tastypie.readthedocs.io/en/latest/"&gt;Tastypie&lt;/a&gt;. Frontend is &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Primary data source is Yahoo's financial data. In particular, I'm pulling these:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;historical stock daily prices &amp;mdash; high, low, open, close, volume&lt;/li&gt;
&lt;li&gt;financial statements &amp;mdash; balance sheet, income statement, and cash flow statement&lt;/li&gt;
&lt;li&gt;published meta &amp;mdash; beta, P/E, and so on. Since these are
  opinionated, Yahoo is just one of many alternatives.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Data model&lt;/h1&gt;
&lt;p&gt;Model names are intuitive.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;MyStock&lt;/td&gt;
&lt;td&gt;Place for name, symbol&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MyStockHistorical&lt;/td&gt;
&lt;td&gt;Daily trading data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MyStrategyValue&lt;/td&gt;
&lt;td&gt;Pre-computed values based on historical, eg. moving average&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IncomeStatement&lt;/td&gt;
&lt;td&gt;As name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BalanceSheet&lt;/td&gt;
&lt;td&gt;As name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CashFlow&lt;/td&gt;
&lt;td&gt;As name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ValuationRatio&lt;/td&gt;
&lt;td&gt;Published valuation ratios, eg. P/E. They are source dependent.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figure class="col s12"&gt;
  &lt;img src="images/stock.png"/&gt;
  &lt;figcaption&gt;Stock app data models&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1&gt;Data persistence &amp;amp; processing&lt;/h1&gt;
&lt;p&gt;Data persistence is MySql 5.7. Using Django's ORM, this is not a hard
requirement if your preference is something else.&lt;/p&gt;
&lt;p&gt;Data processing is handled by Redis via Celery so to achieve ease of
scale. As mentioned earlier, &lt;code&gt;MyStrategeValue&lt;/code&gt; are derived from
historicals, thus are computed prehand using this mechanism: Django
custom command &amp;rarr; compose celery task &amp;rarr; submit task to Redis
queue &amp;rarr; task executed and data is persisted to DB.&lt;/p&gt;
&lt;p&gt;There are also custom model property which is computed on the
fly. Most of them can be pre-computed also since historicals are
essentially static after a day. However, to minimize dependency on
these values that must be prepared as a separate step, we opted to the
current method. By observation, performance penalty by not having them
in DB is acceptable.&lt;/p&gt;
&lt;p&gt;Using docker, the following data volumes are used:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Volume&lt;/th&gt;
&lt;th&gt;Attach to&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;stock-data&lt;/td&gt;
&lt;td&gt;Main DB data storage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;redis-data&lt;/td&gt;
&lt;td&gt;Redis data storage&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;Develop &amp;amp; Deployment&lt;/h1&gt;
&lt;p&gt;See &lt;a href="https://fengxia41103.github.io/stock/dev and deployment.html"&gt;dev &amp;amp; deployment&lt;/a&gt; for details.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Some source provide indicators such as MACD. Most, however, only
provide raw/reported data such as sales of an Income Statement. My
goal, therefore, is to follow the conventional train of thought by
converting these values into percentage, and some period-to-period
change rate, and so on, which I found myself doing a lot whenever
I receive an Excel full of numbers.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;This is a made up example for illustration purpose.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="misc"></category></entry></feed>